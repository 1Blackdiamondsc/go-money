package money

import (
	"github.com/shopspring/decimal"
	"testing"
)

func TestFormatter_FormatX(t *testing.T) {
	tcs := []struct {
		testtype int
		fraction int
		decimal  string
		thousand string
		grapheme string
		template string
		amount   int64
		expected string
	}{
		{1, 2, ".", ",", "$", "1 $", 0, "0.00 $"},
		{1, 2, ".", ",", "$", "1 $", 1, "0.01 $"},
		{1, 2, ".", ",", "$", "1 $", 12, "0.12 $"},
		{1, 2, ".", ",", "$", "1 $", 123, "1.23 $"},
		{1, 2, ".", ",", "$", "1 $", 1234, "12.34 $"},
		{1, 2, ".", ",", "$", "1 $", 12345, "123.45 $"},
		{1, 2, ".", ",", "$", "1 $", 123456, "1,234.56 $"},
		{1, 2, ".", ",", "$", "1 $", 1234567, "12,345.67 $"},
		{1, 2, ".", ",", "$", "1 $", 12345678, "123,456.78 $"},
		{1, 2, ".", ",", "$", "1 $", 123456789, "1,234,567.89 $"},

		{1, 2, ".", ",", "$", "1 $", -1, "-0.01 $"},
		{1, 2, ".", ",", "$", "1 $", -12, "-0.12 $"},
		{1, 2, ".", ",", "$", "1 $", -123, "-1.23 $"},
		{1, 2, ".", ",", "$", "1 $", -1234, "-12.34 $"},
		{1, 2, ".", ",", "$", "1 $", -12345, "-123.45 $"},
		{1, 2, ".", ",", "$", "1 $", -123456, "-1,234.56 $"},
		{1, 2, ".", ",", "$", "1 $", -1234567, "-12,345.67 $"},
		{1, 2, ".", ",", "$", "1 $", -12345678, "-123,456.78 $"},
		{1, 2, ".", ",", "$", "1 $", -123456789, "-1,234,567.89 $"},

		{1, 3, ".", "", "$", "1 $", 1, "0.001 $"},
		{1, 3, ".", "", "$", "1 $", 12, "0.012 $"},
		{1, 3, ".", "", "$", "1 $", 123, "0.123 $"},
		{1, 3, ".", "", "$", "1 $", 1234, "1.234 $"},
		{1, 3, ".", "", "$", "1 $", 12345, "12.345 $"},
		{1, 3, ".", "", "$", "1 $", 123456, "123.456 $"},
		{1, 3, ".", "", "$", "1 $", 1234567, "1234.567 $"},
		{1, 3, ".", "", "$", "1 $", 12345678, "12345.678 $"},
		{1, 3, ".", "", "$", "1 $", 123456789, "123456.789 $"},

		{1, 2, ".", ",", "£", "$1", 1, "£0.01"},
		{1, 2, ".", ",", "£", "$1", 12, "£0.12"},
		{1, 2, ".", ",", "£", "$1", 123, "£1.23"},
		{1, 2, ".", ",", "£", "$1", 1234, "£12.34"},
		{1, 2, ".", ",", "£", "$1", 12345, "£123.45"},
		{1, 2, ".", ",", "£", "$1", 123456, "£1,234.56"},
		{1, 2, ".", ",", "£", "$1", 1234567, "£12,345.67"},
		{1, 2, ".", ",", "£", "$1", 12345678, "£123,456.78"},
		{1, 2, ".", ",", "£", "$1", 123456789, "£1,234,567.89"},

		{1, 0, ".", ",", "NT$", "$1", 1, "NT$1"},
		{1, 0, ".", ",", "NT$", "$1", 12, "NT$12"},
		{1, 0, ".", ",", "NT$", "$1", 123, "NT$123"},
		{1, 0, ".", ",", "NT$", "$1", 1234, "NT$1,234"},
		{1, 0, ".", ",", "NT$", "$1", 12345, "NT$12,345"},
		{1, 0, ".", ",", "NT$", "$1", 123456, "NT$123,456"},
		{1, 0, ".", ",", "NT$", "$1", 1234567, "NT$1,234,567"},
		{1, 0, ".", ",", "NT$", "$1", 12345678, "NT$12,345,678"},
		{1, 0, ".", ",", "NT$", "$1", 123456789, "NT$123,456,789"},

		{1, 0, ".", ",", "NT$", "$1", -1, "-NT$1"},
		{1, 0, ".", ",", "NT$", "$1", -12, "-NT$12"},
		{1, 0, ".", ",", "NT$", "$1", -123, "-NT$123"},
		{1, 0, ".", ",", "NT$", "$1", -1234, "-NT$1,234"},
		{1, 0, ".", ",", "NT$", "$1", -12345, "-NT$12,345"},
		{1, 0, ".", ",", "NT$", "$1", -123456, "-NT$123,456"},
		{1, 0, ".", ",", "NT$", "$1", -1234567, "-NT$1,234,567"},
		{1, 0, ".", ",", "NT$", "$1", -12345678, "-NT$12,345,678"},
		{1, 0, ".", ",", "NT$", "$1", -123456789, "-NT$123,456,789"},

		{2, 2, ".", ",", "$", "1 $", -1, "(0.01)"},
		{2, 2, ".", ",", "$", "1 $", -12, "(0.12)"},
		{2, 2, ".", ",", "$", "1 $", -123, "(1.23)"},
		{2, 2, ".", ",", "$", "1 $", -1234, "(12.34)"},
		{2, 2, ".", ",", "$", "1 $", -12345, "(123.45)"},
		{2, 2, ".", ",", "$", "1 $", -123456, "(1234.56)"},
		{2, 2, ".", ",", "$", "1 $", -1234567, "(12345.67)"},
		{2, 2, ".", ",", "$", "1 $", -12345678, "(123456.78)"},
		{2, 2, ".", ",", "$", "1 $", -123456789, "(1234567.89)"},
	}

	for _, tc := range tcs {
		formatter := NewFormatter(tc.fraction, tc.decimal, tc.thousand, tc.grapheme, tc.template)
		var r string
		if tc.testtype == 2 {
			r = formatter.FormatAccounting(decimal.New(tc.amount, int32(-tc.fraction)))
		} else {
			r = formatter.FormatCurrency(decimal.New(tc.amount, int32(-tc.fraction)))
		}
		if r != tc.expected {
			t.Errorf("Expected %d formatted to be %s got %s", tc.amount, tc.expected, r)
		}
	}
}

func TestFormatter_FormatWithCurrency(t *testing.T) {
	tcs := []struct {
		testtype int
		currency string
		amount   int64
		expected string
	}{
		{1, "AUD", 0, "$0.00"},
		{1, "AUD", 1, "$0.01"},
		{1, "AUD", 12, "$0.12"},
		{1, "AUD", 123, "$1.23"},
		{1, "AUD", 1234, "$12.34"},
		{1, "AUD", 12345, "$123.45"},
		{1, "AUD", 123456, "$1,234.56"},
		{1, "AUD", 1234567, "$12,345.67"},
		{1, "AUD", 12345678, "$123,456.78"},
		{1, "AUD", 123456789, "$1,234,567.89"},

		{1, "AUD", -1, "-$0.01"},
		{1, "AUD", -12, "-$0.12"},
		{1, "AUD", -123, "-$1.23"},
		{1, "AUD", -1234, "-$12.34"},
		{1, "AUD", -12345, "-$123.45"},
		{1, "AUD", -123456, "-$1,234.56"},
		{1, "AUD", -1234567, "-$12,345.67"},
		{1, "AUD", -12345678, "-$123,456.78"},
		{1, "AUD", -123456789, "-$1,234,567.89"},

		{1, "#01", 1, "TEST#01:0|001"},
		{1, "#01", 12, "TEST#01:0|012"},
		{1, "#01", 123, "TEST#01:0|123"},
		{1, "#01", -1234, "-TEST#01:1|234"},
		{2, "#01", -12345, "(12|345)"},
		{2, "#01", -123456, "(123|456)"},
		{2, "#01", -1234567, "(1234|567)"},
		{2, "#01", 12345678, "12345|678"},
		{1, "#01", 123456789, "TEST#01:123_456|789"},

		{1, "GBP", 1, "£0.01"},
		{1, "GBP", 12, "£0.12"},
		{1, "GBP", 123, "£1.23"},
		{1, "GBP", -1234, "-£12.34"},
		{1, "GBP", 12345, "£123.45"},
		{1, "GBP", 123456, "£1,234.56"},
		{1, "GBP", 1234567, "£12,345.67"},
		{2, "GBP", -12345678, "(123456.78)"},
		{1, "GBP", -123456789, "-£1,234,567.89"},
	}

	// Add some test currencies first
	_ = AddCurrency(CurrType(9999999), "#01", "TEST#01:", "$1", "|", "_", 3)

	for _, tc := range tcs {
		c, _ := GetCurrency(tc.currency)
		formatter := c.Formatter()

		var r string
		if tc.testtype == 2 {
			r = formatter.FormatAccounting(decimal.New(tc.amount, int32(-formatter.Fraction)))
		} else {
			r = formatter.FormatCurrency(decimal.New(tc.amount, int32(-formatter.Fraction)))
		}
		if r != tc.expected {
			t.Errorf("Expected %d formatted to be %s got %s", tc.amount, tc.expected, r)
		}
	}
}
